
require 'trollop'
require 'docsplit'
require 'assessment'

#
# Splits a PDF and returns an array of relevant images.
# If a non-PDF is provided, its filename is returned unmodified.
# 
def split_pdf(filename, density=300, format=:jpg)

  #If this isn't a PDF, return the unmodified filename.
  return filename unless File.extname(filename) == '.pdf'

  #Get the length of the PDF...
  length = Docsplit.extract_length(filename)

  #If we don't have a multi-page document, abort.
  return filename unless length > 1

  #Otherwise, split the document
  Docsplit.extract_pages(filename)

  # Determine the base name of the file, and the file's length, in pages.
  # We have to use these two parameters to figure out the files generated by docsplit,
  # which doesn't return a list of created files.
  basename = File.basename(filename, '.pdf')

  #... and add the resultant PDFs to the new argument list.
  (1..length).collect { |x| "#{basename}_#{x}.pdf" }

end

#
# Converts a list o 
#
def split_pdfs!(list, density=300, format=:jpg)

  #Process each of the command-line arguments;
  #potentially transforming them into lists of split files.
  list.map! { |pdf| split_pdf(pdf, density, format) }

  #Flatten the list of files.
  list.flatten!

end


# Set up the command-line arguments for the application.
opts = Trollop::options do
  version "PaperCopy assessment helper for Moodle, version 0.1.0"
  
  opt :split,     "Split multi-page PDFs into multiple single-page PDFs."
  opt :outpath,   "Specifies the output folder for multiple-file operations.", :default => Dir::pwd + '/'
  
  opt :question,  "Split into several single-question PDFs."
  opt :qprefix,   "The prefix use for single-question PDF files. Ignored unless the --question flag is provided.", :default => 'question'

  opt :attempt,   "Split into several single-attempt PDFs."
  opt :aprefix,   "The prefix use for single-attempt PDF files. Ignored unless the --attempt flag is provided.", :default => 'attempt'

  opt :footer,    "An image to be appended to each question in the PDF.", :default => nil, :type=> :string

end

#If the split option was provided, split the PDFs into various files, and use those.
split_pdfs!(ARGV, opts[:density]) if opts[:split]

#If we don't have any other operation, abort.
exit unless opts[:question] || opts[:attempt]

#Create a new assessment, and fill it with each of the given files
assess = Assessment::Assessment.from_files(ARGV)

#Handle the question option...
if opts[:question]
  assess.to_pdfs_by_question(opts[:outpath], opts[:qprefix], opts[:footer])
end

#Handle the question option...
if opts[:attempt]
  assess.to_pdfs_by_attempt(opts[:outpath], opts[:aprefix], opts[:footer])
end

